version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15-alpine
    container_name: telegram_tickets_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: telegram_tickets
      POSTGRES_USER: telegram_tickets
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - telegram_tickets_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_tickets -d telegram_tickets"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis для кэша и сессий
  redis:
    image: redis:7-alpine
    container_name: telegram_tickets_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - telegram_tickets_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Adminer для управления БД (опционально)
  adminer:
    image: adminer:4-standalone
    container_name: telegram_tickets_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - telegram_tickets_network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_DB_HOST: postgres
      ADMINER_DEFAULT_DB_NAME: telegram_tickets

  # Redis Commander для управления Redis (опционально)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: telegram_tickets_redis_commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - telegram_tickets_network
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: local:redis:6379:0:password

  # Основное приложение (для продакшена)
  app:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    container_name: telegram_tickets_app
    restart: unless-stopped
    ports:
      - "8000:8000"
    networks:
      - telegram_tickets_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://telegram_tickets:password@postgres:5432/telegram_tickets
      - REDIS_URL=redis://:password@redis:6379/0
      - DEBUG=False
      - ENVIRONMENT=production
    volumes:
      - ../uploads:/app/uploads
      - ../logs:/app/logs
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  telegram_tickets_network:
    driver: bridge
    name: telegram_tickets_network