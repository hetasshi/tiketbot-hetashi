"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Telegram Ticket Bot
"""

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pathlib import Path
import uvicorn

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Telegram Ticket Bot Demo",
    version="1.0.0",
    description="Demo –≤–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è Telegram"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Frontend —Ñ–∞–π–ª—ã
frontend_path = Path("frontend")
if frontend_path.exists():
    app.mount("/app", StaticFiles(directory="frontend"), name="frontend")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
uploads_path = Path("uploads")
uploads_path.mkdir(exist_ok=True)

logs_path = Path("logs")
logs_path.mkdir(exist_ok=True)

# Health check
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "message": "Telegram Ticket Bot Demo Server running"
    }

# Root endpoint
@app.get("/")
async def root():
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Ticket Bot Demo!",
        "frontend_url": "/app/index.html",
        "api_docs": "/docs"
    }

# Mock API endpoints –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
@app.post("/api/v1/auth/telegram")
async def mock_auth():
    return {
        "access_token": "demo_token",
        "token_type": "bearer",
        "user": {
            "id": "demo-user-123",
            "telegram_id": 123456789,
            "first_name": "Demo",
            "last_name": "User",
            "username": "demo_user",
            "role": "USER"
        }
    }

@app.get("/api/v1/auth/me")
async def mock_me():
    return {
        "id": "demo-user-123",
        "telegram_id": 123456789,
        "first_name": "Demo",
        "last_name": "User",
        "username": "demo_user",
        "role": "USER",
        "is_active": True
    }

@app.get("/api/v1/tickets")
async def mock_tickets():
    return {
        "items": [
            {
                "id": "ticket-001",
                "title": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É",
                "description": "–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞.",
                "status": "OPEN",
                "priority": "HIGH",
                "category": {
                    "id": "tech-issues",
                    "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
                    "icon": "üîß"
                },
                "messages_count": 3,
                "created_at": "2024-12-07T10:30:00Z"
            },
            {
                "id": "ticket-002", 
                "title": "–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                "description": "–•–æ—á—É –ø—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –≤–∞—à –±–æ—Ç.",
                "status": "IN_PROGRESS",
                "priority": "NORMAL",
                "category": {
                    "id": "payment",
                    "name": "–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏",
                    "icon": "üí≥"
                },
                "messages_count": 1,
                "created_at": "2024-12-06T15:20:00Z"
            },
            {
                "id": "ticket-003",
                "title": "–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞",
                "description": "–ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º CheaterXX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Survival. –ü—Ä–æ—à—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.",
                "status": "RESOLVED",
                "priority": "NORMAL", 
                "category": {
                    "id": "reports",
                    "name": "–ñ–∞–ª–æ–±—ã –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤",
                    "icon": "üö®"
                },
                "messages_count": 5,
                "created_at": "2024-12-05T18:45:00Z"
            }
        ],
        "total": 3,
        "page": 1,
        "size": 20,
        "pages": 1
    }

@app.get("/api/v1/categories")
async def mock_categories():
    return [
        {
            "id": "tech-issues",
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "description": "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ª–∞–≥–∞–º–∏, –±–∞–≥–∞–º–∏",
            "icon": "üîß",
            "color": "#4ECDC4",
            "is_active": True,
            "sort_order": 1
        },
        {
            "id": "payment",
            "name": "–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏",
            "description": "–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—Ç—É —Å—Ä–µ–¥—Å—Ç–≤",
            "icon": "üí≥", 
            "color": "#45B7D1",
            "is_active": True,
            "sort_order": 2
        },
        {
            "id": "reports",
            "name": "–ñ–∞–ª–æ–±—ã –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤",
            "description": "–ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª, —á–∏—Ç—ã, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å",
            "icon": "üö®",
            "color": "#F39C12",
            "is_active": True,
            "sort_order": 3
        }
    ]

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ Telegram Ticket Bot Demo Server")
    print("Frontend: http://127.0.0.1:8000/app/index.html")
    print("API Docs: http://127.0.0.1:8000/docs")
    print("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:8000")
    
    uvicorn.run(
        "demo_server:app",
        host="127.0.0.1",
        port=8000,
        reload=True
    )