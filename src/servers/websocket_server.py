"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Demo —Å–µ—Ä–≤–µ—Ä —Å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é FastAPI –¥–ª—è –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫
"""

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
from pathlib import Path
import uvicorn
import json
import asyncio
from typing import List, Dict, Any
from datetime import datetime
import uuid
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).parent.parent.parent / "deployment" / "config" / ".env"
load_dotenv(env_path)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup: –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    task = asyncio.create_task(send_periodic_updates())
    print("WebSocket server started with real-time capabilities")
    yield
    # Shutdown: –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    task.cancel()

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="TiketHet with WebSocket",
    version="1.1.0",
    description="Demo –≤–µ—Ä—Å–∏—è —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ WebSocket",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Middleware –¥–ª—è –æ–±—Ö–æ–¥–∞ ngrok warning
@app.middleware("http")
async def add_ngrok_header(request, call_next):
    response = await call_next(request)
    response.headers["ngrok-skip-browser-warning"] = "true"
    return response

# Frontend —Ñ–∞–π–ª—ã
frontend_path = Path("frontend")
if frontend_path.exists():
    app.mount("/app", StaticFiles(directory="frontend"), name="frontend")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
uploads_path = Path("uploads")
uploads_path.mkdir(exist_ok=True)

logs_path = Path("logs")
logs_path.mkdir(exist_ok=True)


# WebSocket Connection Manager (–ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FastAPI)
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []
        self.user_connections: Dict[str, WebSocket] = {}

    async def connect(self, websocket: WebSocket, user_id: str = None):
        await websocket.accept()
        self.active_connections.append(websocket)
        if user_id:
            self.user_connections[user_id] = websocket
        print(f"WebSocket connected. Active connections: {len(self.active_connections)}")

    def disconnect(self, websocket: WebSocket, user_id: str = None):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        if user_id and user_id in self.user_connections:
            del self.user_connections[user_id]
        print(f"WebSocket disconnected. Active connections: {len(self.active_connections)}")

    async def send_personal_message(self, message: dict, user_id: str):
        if user_id in self.user_connections:
            websocket = self.user_connections[user_id]
            try:
                await websocket.send_json(message)
            except Exception as e:
                print(f"Error sending personal message: {e}")

    async def broadcast(self, message: dict):
        disconnected = []
        for connection in self.active_connections:
            try:
                await connection.send_json(message)
            except Exception as e:
                print(f"Error broadcasting message: {e}")
                disconnected.append(connection)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for conn in disconnected:
            if conn in self.active_connections:
                self.active_connections.remove(conn)


manager = ConnectionManager()

# Mock database –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
mock_tickets = [
    {
        "id": "ticket-001",
        "title": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É",
        "description": "–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–≥—Ä–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞.",
        "status": "OPEN",
        "priority": "HIGH",
        "category": {
            "id": "tech-issues",
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "icon": "üîß"
        },
        "messages_count": 3,
        "created_at": "2024-12-07T10:30:00Z",
        "updated_at": "2024-12-07T11:15:00Z"
    },
    {
        "id": "ticket-002", 
        "title": "–í–æ–ø—Ä–æ—Å –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        "description": "–•–æ—á—É –ø—Ä–æ–¥–ª–∏—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –≤–∞—à –±–æ—Ç.",
        "status": "IN_PROGRESS",
        "priority": "NORMAL",
        "category": {
            "id": "payment",
            "name": "–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏",
            "icon": "üí≥"
        },
        "messages_count": 1,
        "created_at": "2024-12-06T15:20:00Z",
        "updated_at": "2024-12-07T09:30:00Z"
    },
    {
        "id": "ticket-003",
        "title": "–ñ–∞–ª–æ–±–∞ –Ω–∞ –∏–≥—Ä–æ–∫–∞",
        "description": "–ò–≥—Ä–æ–∫ —Å –Ω–∏–∫–æ–º CheaterXX –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–∏—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Survival. –ü—Ä–æ—à—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.",
        "status": "RESOLVED",
        "priority": "NORMAL", 
        "category": {
            "id": "reports",
            "name": "–ñ–∞–ª–æ–±—ã –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤",
            "icon": "üö®"
        },
        "messages_count": 5,
        "created_at": "2024-12-05T18:45:00Z",
        "updated_at": "2024-12-07T14:20:00Z"
    }
]


# Health check
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "message": "TiketHet WebSocket Server running",
        "active_connections": len(manager.active_connections),
        "features": ["WebSocket", "Real-time notifications", "Live updates"]
    }

# Configuration endpoint for frontend
@app.get("/api/config")
async def get_config():
    import os
    frontend_url = os.getenv("FRONTEND_URL", "https://localhost:8000")
    websocket_url = frontend_url.replace("https://", "wss://").replace("http://", "ws://")
    
    return {
        "frontend_url": frontend_url,
        "websocket_url": websocket_url,
        "api_base": frontend_url + "/api"
    }

# Additional routes to handle common browser requests
@app.get("/tickets")
async def tickets_redirect():
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="/app/index.html")

@app.get("/favicon.ico")
async def favicon():
    from fastapi.responses import Response
    # Return empty response to prevent 404 errors
    return Response(content="", media_type="image/x-icon")

# Root endpoint - redirect to Mini App
@app.get("/")
async def root():
    from fastapi.responses import RedirectResponse
    return RedirectResponse(url="/app/index.html")


# WebSocket endpoint (—Å–ª–µ–¥—É—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FastAPI)
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    user_id = "demo-user"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    await manager.connect(websocket, user_id)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await websocket.send_json({
            "type": "connection_established",
            "message": "WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            "timestamp": datetime.now().isoformat(),
            "user_id": user_id
        })
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
                data = await websocket.receive_json()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                message_type = data.get("type", "unknown")
                
                if message_type == "ping":
                    await websocket.send_json({
                        "type": "pong",
                        "timestamp": datetime.now().isoformat()
                    })
                    
                elif message_type == "subscribe_notifications":
                    await websocket.send_json({
                        "type": "subscribed",
                        "message": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞",
                        "timestamp": datetime.now().isoformat()
                    })
                    
                elif message_type == "ticket_update":
                    # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
                    await handle_ticket_update(data, user_id)
                    
                else:
                    await websocket.send_json({
                        "type": "echo",
                        "original_message": data,
                        "timestamp": datetime.now().isoformat()
                    })
                    
            except WebSocketDisconnect:
                break
            except Exception as e:
                print(f"Error in WebSocket loop: {e}")
                await websocket.send_json({
                    "type": "error",
                    "message": f"Server error: {str(e)}",
                    "timestamp": datetime.now().isoformat()
                })
                
    except WebSocketDisconnect:
        pass
    except Exception as e:
        print(f"WebSocket connection error: {e}")
    finally:
        manager.disconnect(websocket, user_id)


async def handle_ticket_update(data: dict, user_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–æ–≤ —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    ticket_id = data.get("ticket_id")
    update_type = data.get("update_type", "status_change")
    
    # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
    if ticket_id:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–∫–µ—Ç –≤ mock –¥–∞–Ω–Ω—ã—Ö
        ticket = next((t for t in mock_tickets if t["id"] == ticket_id), None)
        if ticket:
            old_status = ticket["status"]
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            if update_type == "status_change":
                new_status = data.get("new_status", "IN_PROGRESS")
                ticket["status"] = new_status
                ticket["updated_at"] = datetime.now().isoformat()
                
                # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                notification = {
                    "type": "ticket_status_changed",
                    "ticket_id": ticket_id,
                    "ticket_title": ticket["title"],
                    "old_status": old_status,
                    "new_status": new_status,
                    "updated_by": user_id,
                    "timestamp": datetime.now().isoformat(),
                    "message": f"–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ '{ticket['title']}' –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'"
                }
                
                await manager.broadcast(notification)
                
            elif update_type == "new_message":
                ticket["messages_count"] += 1
                ticket["updated_at"] = datetime.now().isoformat()
                
                notification = {
                    "type": "new_ticket_message",
                    "ticket_id": ticket_id,
                    "ticket_title": ticket["title"],
                    "message_author": user_id,
                    "timestamp": datetime.now().isoformat(),
                    "message": f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ '{ticket['title']}'"
                }
                
                await manager.broadcast(notification)


# –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def send_periodic_updates():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    while True:
        await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        
        if manager.active_connections:
            update = {
                "type": "periodic_update",
                "timestamp": datetime.now().isoformat(),
                "active_connections": len(manager.active_connections),
                "server_status": "healthy",
                "message": "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"
            }
            
            await manager.broadcast(update)


# Mock API endpoints (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WebSocket)
@app.post("/api/v1/auth/telegram")
async def mock_auth():
    return {
        "access_token": "demo_token",
        "token_type": "bearer",
        "user": {
            "id": "demo-user-123",
            "telegram_id": 123456789,
            "first_name": "Demo",
            "last_name": "User",
            "username": "demo_user",
            "role": "USER"
        }
    }

@app.get("/api/v1/auth/me")
async def mock_me():
    return {
        "id": "demo-user-123",
        "telegram_id": 123456789,
        "first_name": "Demo",
        "last_name": "User",
        "username": "demo_user",
        "role": "USER",
        "is_active": True
    }

@app.get("/api/v1/tickets")
async def get_tickets():
    return {
        "items": mock_tickets,
        "total": len(mock_tickets),
        "page": 1,
        "size": 20,
        "pages": 1
    }

# –ù–æ–≤—ã–π endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@app.post("/api/v1/tickets/{ticket_id}/update")
async def update_ticket_status(ticket_id: str, update_data: dict):
    """Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–æ–≤"""
    
    # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
    await handle_ticket_update({
        "ticket_id": ticket_id,
        "update_type": "status_change",
        "new_status": update_data.get("status", "IN_PROGRESS")
    }, "admin-user")
    
    return {
        "success": True,
        "message": f"–¢–∏–∫–µ—Ç {ticket_id} –æ–±–Ω–æ–≤–ª–µ–Ω",
        "timestamp": datetime.now().isoformat(),
        "broadcast_sent": True
    }

@app.get("/api/v1/categories")
async def mock_categories():
    return [
        {
            "id": "tech-issues",
            "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            "description": "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º, –ª–∞–≥–∞–º–∏, –±–∞–≥–∞–º–∏",
            "icon": "üîß",
            "color": "#4ECDC4",
            "is_active": True,
            "sort_order": 1
        },
        {
            "id": "payment",
            "name": "–û–ø–ª–∞—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫–∏",
            "description": "–í–æ–ø—Ä–æ—Å—ã –ø–æ –æ–ø–ª–∞—Ç–µ, –≤–æ–∑–≤—Ä–∞—Ç—É —Å—Ä–µ–¥—Å—Ç–≤",
            "icon": "üí≥", 
            "color": "#45B7D1",
            "is_active": True,
            "sort_order": 2
        },
        {
            "id": "reports",
            "name": "–ñ–∞–ª–æ–±—ã –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤",
            "description": "–ù–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª, —á–∏—Ç—ã, —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å",
            "icon": "üö®",
            "color": "#F39C12",
            "is_active": True,
            "sort_order": 3
        }
    ]




if __name__ == "__main__":
    print("Starting TiketHet WebSocket Server")
    print("Frontend: http://127.0.0.1:8000/app/index.html")
    print("API Docs: http://127.0.0.1:8000/docs")
    print("WebSocket: ws://127.0.0.1:8000/ws")
    print("Available at: http://127.0.0.1:8000")
    print("Real-time updates enabled!")
    
    uvicorn.run(
        "websocket_server:app",
        host="127.0.0.1",
        port=8000,
        reload=True
    )