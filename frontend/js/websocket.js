/**
 * WebSocket –º–æ–¥—É–ª—å –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ Telegram Ticket Bot
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ WebSocket –æ—Ç FastAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */

class WebSocketClient {
    constructor(baseUrl = null) {
        this.baseUrl = baseUrl;
        this.socket = null;
        this.isConnected = false;
        this.reconnectAttempts = 0;
        this.maxReconnectAttempts = 5;
        this.reconnectDelay = 1000; // –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
        this.heartbeatInterval = null;
        
        // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        this.eventHandlers = {
            'connection_established': [],
            'ticket_status_changed': [],
            'new_ticket_message': [],
            'periodic_update': [],
            'error': [],
            'disconnect': []
        };
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    async init() {
        if (!this.baseUrl) {
            await this.loadConfig();
        }
        this.connect();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadConfig() {
        try {
            const response = await fetch('/api/config');
            const config = await response.json();
            this.baseUrl = config.websocket_url;
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket:', config);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            // Fallback –Ω–∞ localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            this.baseUrl = 'ws://127.0.0.1:8000';
        }
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
     */
    connect() {
        try {
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...', `${this.baseUrl}/ws`);
            
            // –°–æ–∑–¥–∞–µ–º WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            this.socket = new WebSocket(`${this.baseUrl}/ws`);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.socket.onopen = (event) => {
                console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat
                this.startHeartbeat();
                
                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                this.send({
                    type: 'subscribe_notifications',
                    timestamp: new Date().toISOString()
                });
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º haptic feedback –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (window.api) {
                    window.api.hapticFeedback('light');
                }
            };
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            this.socket.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    this.handleMessage(data);
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            this.socket.onclose = (event) => {
                console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω', event.code, event.reason);
                this.isConnected = false;
                this.stopHeartbeat();
                
                // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                this.emit('disconnect', { code: event.code, reason: event.reason });
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                this.scheduleReconnect();
            };
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            this.socket.onerror = (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
                this.emit('error', { error: error });
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            this.scheduleReconnect();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    handleMessage(data) {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        
        const messageType = data.type || 'unknown';
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        switch (messageType) {
            case 'connection_established':
                console.log('üéâ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', data.message);
                break;
                
            case 'ticket_status_changed':
                this.handleTicketStatusChanged(data);
                break;
                
            case 'new_ticket_message':
                this.handleNewTicketMessage(data);
                break;
                
            case 'periodic_update':
                console.log('‚è∞ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', data.message);
                break;
                
            case 'pong':
                console.log('üèì Pong –ø–æ–ª—É—á–µ–Ω');
                break;
                
            case 'error':
                console.error('‚ùå –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞:', data.message);
                break;
                
            default:
                console.log('üì¶ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        }
        
        // –í—ã–∑—ã–≤–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.emit(messageType, data);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
     */
    handleTicketStatusChanged(data) {
        console.log(`üîÑ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ ${data.ticket_id} –∏–∑–º–µ–Ω–µ–Ω:`, 
                   `${data.old_status} ‚Üí ${data.new_status}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        this.showNotification(
            `–¢–∏–∫–µ—Ç "${data.ticket_title}" –æ–±–Ω–æ–≤–ª–µ–Ω`,
            `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${this.getStatusText(data.new_status)}`,
            'info'
        );
        
        // Haptic feedback
        if (window.api) {
            window.api.hapticFeedback('medium');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (window.ticketApp) {
            window.ticketApp.handleTicketUpdate(data);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏–∫–µ—Ç–µ
     */
    handleNewTicketMessage(data) {
        console.log(`üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ ${data.ticket_id}`);
        
        this.showNotification(
            '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            `–í —Ç–∏–∫–µ—Ç–µ "${data.ticket_title}"`,
            'info'
        );
        
        // Haptic feedback
        if (window.api) {
            window.api.hapticFeedback('light');
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     */
    send(message) {
        if (this.isConnected && this.socket.readyState === WebSocket.OPEN) {
            try {
                this.socket.send(JSON.stringify(message));
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        } else {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', message);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ heartbeat (–ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
     */
    startHeartbeat() {
        this.heartbeatInterval = setInterval(() => {
            if (this.isConnected) {
                this.send({
                    type: 'ping',
                    timestamp: new Date().toISOString()
                });
            }
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ heartbeat
     */
    stopHeartbeat() {
        if (this.heartbeatInterval) {
            clearInterval(this.heartbeatInterval);
            this.heartbeatInterval = null;
        }
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
     */
    scheduleReconnect() {
        if (this.reconnectAttempts < this.maxReconnectAttempts) {
            this.reconnectAttempts++;
            const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);
            
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
            
            setTimeout(() => {
                this.connect();
            }, delay);
        } else {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.showNotification(
                '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                '–ù–µ —É–¥–∞–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
                'error'
            );
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
     */
    on(eventType, handler) {
        if (!this.eventHandlers[eventType]) {
            this.eventHandlers[eventType] = [];
        }
        this.eventHandlers[eventType].push(handler);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è
     */
    off(eventType, handler) {
        if (this.eventHandlers[eventType]) {
            const index = this.eventHandlers[eventType].indexOf(handler);
            if (index > -1) {
                this.eventHandlers[eventType].splice(index, 1);
            }
        }
    }

    /**
     * –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è
     */
    emit(eventType, data) {
        if (this.eventHandlers[eventType]) {
            this.eventHandlers[eventType].forEach(handler => {
                try {
                    handler(data);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${eventType}:`, error);
                }
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    showNotification(title, message, type = 'info') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        if (window.api) {
            window.api.showNotification(`${title}: ${message}`, type);
            return;
        }
        
        // Fallback - —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification(title, {
                body: message,
                icon: '/app/assets/icon.png'
            });
        }
        
        // Fallback - console
        console.log(`[${type.toUpperCase()}] ${title}: ${message}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
     */
    getStatusText(status) {
        const statusMap = {
            'OPEN': '–û—Ç–∫—Ä—ã—Ç',
            'IN_PROGRESS': '–í —Ä–∞–±–æ—Ç–µ',
            'WAITING_RESPONSE': '–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞',
            'RESOLVED': '–†–µ—à—ë–Ω',
            'CLOSED': '–ó–∞–∫—Ä—ã—Ç'
        };
        return statusMap[status] || status;
    }

    /**
     * –≠–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    simulateTicketUpdate(ticketId, newStatus) {
        this.send({
            type: 'ticket_update',
            ticket_id: ticketId,
            update_type: 'status_change',
            new_status: newStatus,
            timestamp: new Date().toISOString()
        });
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    disconnect() {
        console.log('üîå –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
        this.stopHeartbeat();
        
        if (this.socket) {
            this.socket.close();
        }
        
        this.isConnected = false;
        this.socket = null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    getConnectionStatus() {
        return {
            isConnected: this.isConnected,
            readyState: this.socket ? this.socket.readyState : WebSocket.CLOSED,
            reconnectAttempts: this.reconnectAttempts,
            maxReconnectAttempts: this.maxReconnectAttempts
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä WebSocket –∫–ª–∏–µ–Ω—Ç–∞
window.wsClient = new WebSocketClient();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –º–æ–¥—É–ª–µ–π
if (typeof module !== 'undefined' && module.exports) {
    module.exports = WebSocketClient;
}