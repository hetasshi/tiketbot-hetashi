"""
–ú–æ–¥–µ–ª—å —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
"""

import enum
from datetime import datetime
from typing import Optional
import uuid

from sqlalchemy import String, Text, Boolean, DateTime, Enum, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .base import BaseModel


class TicketStatus(enum.Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ç–∏–∫–µ—Ç–æ–≤."""
    
    OPEN = "OPEN"                           # –û—Ç–∫—Ä—ã—Ç (–Ω–æ–≤—ã–π)
    IN_PROGRESS = "IN_PROGRESS"             # –í —Ä–∞–±–æ—Ç–µ
    WAITING_RESPONSE = "WAITING_RESPONSE"   # –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
    RESOLVED = "RESOLVED"                   # –†–µ—à–µ–Ω
    CLOSED = "CLOSED"                       # –ó–∞–∫—Ä—ã—Ç
    
    def __str__(self):
        return self.value
    
    @property
    def display_name(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
        names = {
            TicketStatus.OPEN: "–û—Ç–∫—Ä—ã—Ç",
            TicketStatus.IN_PROGRESS: "–í —Ä–∞–±–æ—Ç–µ",
            TicketStatus.WAITING_RESPONSE: "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞",
            TicketStatus.RESOLVED: "–†–µ—à–µ–Ω",
            TicketStatus.CLOSED: "–ó–∞–∫—Ä—ã—Ç"
        }
        return names[self]
    
    @property
    def color(self) -> str:
        """–¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è UI."""
        colors = {
            TicketStatus.OPEN: "#FF6B6B",
            TicketStatus.IN_PROGRESS: "#4ECDC4",
            TicketStatus.WAITING_RESPONSE: "#FECA57",
            TicketStatus.RESOLVED: "#96CEB4",
            TicketStatus.CLOSED: "#B8B8B8"
        }
        return colors[self]
    
    @property
    def is_active(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã–º (–Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–º)."""
        return self in [TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.WAITING_RESPONSE]


class TicketPriority(enum.Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ç–∏–∫–µ—Ç–æ–≤."""
    
    LOW = "LOW"           # –ù–∏–∑–∫–∏–π
    NORMAL = "NORMAL"     # –û–±—ã—á–Ω—ã–π
    HIGH = "HIGH"         # –í—ã—Å–æ–∫–∏–π
    CRITICAL = "CRITICAL" # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    
    def __str__(self):
        return self.value
    
    @property
    def level(self) -> int:
        """–ß–∏—Å–ª–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
        levels = {
            TicketPriority.LOW: 1,
            TicketPriority.NORMAL: 2,
            TicketPriority.HIGH: 3,
            TicketPriority.CRITICAL: 4
        }
        return levels[self]
    
    @property
    def display_name(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
        names = {
            TicketPriority.LOW: "–ù–∏–∑–∫–∏–π",
            TicketPriority.NORMAL: "–û–±—ã—á–Ω—ã–π",
            TicketPriority.HIGH: "–í—ã—Å–æ–∫–∏–π",
            TicketPriority.CRITICAL: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
        }
        return names[self]
    
    @property
    def color(self) -> str:
        """–¶–≤–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è UI."""
        colors = {
            TicketPriority.LOW: "#96CEB4",
            TicketPriority.NORMAL: "#45B7D1",
            TicketPriority.HIGH: "#FECA57",
            TicketPriority.CRITICAL: "#FF6B6B"
        }
        return colors[self]
    
    @property
    def icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞."""
        icons = {
            TicketPriority.LOW: "üîµ",
            TicketPriority.NORMAL: "üü°",
            TicketPriority.HIGH: "üü†",
            TicketPriority.CRITICAL: "üî¥"
        }
        return icons[self]


class Ticket(BaseModel):
    """–ú–æ–¥–µ–ª—å —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    
    __tablename__ = "tickets"
    
    # –°–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    user_id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
        comment="ID –∞–≤—Ç–æ—Ä–∞ —Ç–∏–∫–µ—Ç–∞"
    )
    
    assigned_to: Mapped[Optional[uuid.UUID]] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="SET NULL"),
        nullable=True,
        index=True,
        comment="ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"
    )
    
    # –°–≤—è–∑—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    category_id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("categories.id", ondelete="RESTRICT"),
        nullable=False,
        index=True,
        comment="ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞"
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title: Mapped[str] = mapped_column(
        String(500),
        nullable=False,
        comment="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞"
    )
    
    description: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        comment="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    )
    
    # –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    status: Mapped[TicketStatus] = mapped_column(
        Enum(TicketStatus),
        nullable=False,
        default=TicketStatus.OPEN,
        index=True,
        comment="–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞"
    )
    
    priority: Mapped[TicketPriority] = mapped_column(
        Enum(TicketPriority),
        nullable=False,
        default=TicketPriority.NORMAL,
        index=True,
        comment="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–∫–µ—Ç–∞"
    )
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    closed_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        nullable=True,
        comment="–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞"
    )
    
    # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ (lazy loading)
    user = relationship("User", foreign_keys=[user_id], back_populates="tickets")
    assigned_user = relationship("User", foreign_keys=[assigned_to], back_populates="assigned_tickets")
    category = relationship("Category", back_populates="tickets")
    messages = relationship("Message", back_populates="ticket", cascade="all, delete-orphan")
    notifications = relationship("Notification", back_populates="ticket", cascade="all, delete-orphan")
    
    @property
    def is_active(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–∫–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º."""
        return self.status.is_active
    
    @property
    def is_assigned(self) -> bool:
        """–ù–∞–∑–Ω–∞—á–µ–Ω –ª–∏ —Ç–∏–∫–µ—Ç –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        return self.assigned_to is not None
    
    @property
    def display_title(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º."""
        return f"{self.priority.icon} {self.title}"
    
    @property
    def short_description(self) -> str:
        """–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)."""
        if len(self.description) <= 100:
            return self.description
        return self.description[:97] + "..."
    
    def can_be_assigned_to(self, user) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ —Ç–∏–∫–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å
        """
        # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é HELPER+ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        from .user import UserRole
        return user.is_active and user.role.can_access(UserRole.HELPER)
    
    def can_be_viewed_by(self, user: "User") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–∏–∫–µ—Ç.
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
        """
        # –ê–≤—Ç–æ—Ä —Ç–∏–∫–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
        if self.user_id == user.id:
            return True
        
        # –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
        if self.assigned_to == user.id:
            return True
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã
        from .user import UserRole
        return user.role.can_access(UserRole.HELPER)
    
    def can_be_edited_by(self, user: "User") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ç.
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        """
        # –ê–≤—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã
        if self.user_id == user.id and self.status == TicketStatus.OPEN:
            return True
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º —Ç–∏–∫–µ—Ç—ã
        if self.assigned_to == user.id:
            return True
        
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã+ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ —Ç–∏–∫–µ—Ç—ã
        from .user import UserRole
        return user.role.can_access(UserRole.MODERATOR)
    
    def __str__(self) -> str:
        return f"Ticket #{self.id} - {self.title} ({self.status.display_name})"