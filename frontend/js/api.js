/**
 * API –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backend Telegram Ticket Bot
 */

class API {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
        this.baseURL = null; // –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        this.token = null;
        this.configLoaded = false;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
     */
    async init() {
        try {
            console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –Ω–∞—á–∞—Ç–∞...');
            
            // –ú–æ–±–∏–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
            await this.loadConfig();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage –µ—Å–ª–∏ –µ—Å—Ç—å
            this.token = localStorage.getItem('auth_token');
            
            // Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            if (window.Telegram?.WebApp) {
                console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');
                
                // –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                window.Telegram.WebApp.ready();
                
                // –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                try {
                    window.Telegram.WebApp.expand();
                } catch (e) {
                    console.warn('Expand –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', e);
                }
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
                this.applyTelegramTheme();
                
                console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            } else {
                console.log('–ó–∞–ø—É—Å–∫ –≤–Ω–µ Telegram WebApp (demo —Ä–µ–∂–∏–º)');
            }
            
            console.log('API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            this.configLoaded = true;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    async loadConfig() {
        try {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API...');
            
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
            
            const response = await fetch('/api/config', {
                headers: {
                    'ngrok-skip-browser-warning': 'true',
                    'Cache-Control': 'no-cache'
                },
                signal: controller.signal
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const config = await response.json();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API
            this.baseURL = config.api_base + '/v1';
            this.configLoaded = true;
            
            console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', config);
            console.log('API Base URL:', this.baseURL);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API:', error);
            
            // Fallback –Ω–∞ ngrok URL –µ—Å–ª–∏ –º—ã –≤ Telegram
            if (window.Telegram?.WebApp) {
                this.baseURL = 'https://untabled-presuitably-owen.ngrok-free.app/api/v1';
                console.log('Fallback –Ω–∞ ngrok URL:', this.baseURL);
            } else {
                // Fallback –Ω–∞ localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                this.baseURL = 'http://127.0.0.1:8000/api/v1';
                console.log('Fallback –Ω–∞ localhost:', this.baseURL);
            }
            
            this.configLoaded = true;
        }
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    async waitForConfig() {
        console.log('üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        let attempts = 0;
        const maxAttempts = 100;
        
        while (!this.configLoaded && attempts < maxAttempts) {
            if (attempts % 10 === 0) {
                console.log(`üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1}/${maxAttempts}`);
            }
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (!this.configLoaded) {
            console.error('‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
            throw new Error('Configuration load timeout');
        }
        
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', this.baseURL);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π —Ç–µ–º—ã Telegram
     */
    applyTelegramTheme() {
        const webApp = window.Telegram.WebApp;
        if (!webApp) return;

        const root = document.documentElement;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã
        if (webApp.themeParams) {
            Object.entries(webApp.themeParams).forEach(([key, value]) => {
                if (value) {
                    root.style.setProperty(`--tg-theme-${key.replace(/_/g, '-')}`, value);
                }
            });
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        try {
            webApp.setHeaderColor(webApp.themeParams.bg_color || '#ffffff');
        } catch (e) {
            console.warn('Header color –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', e);
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç–∞)
        webApp.MainButton.hide();
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
     */
    async request(endpoint, options = {}) {
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        await this.waitForConfig();
        
        const url = `${this.baseURL}${endpoint}`;
        const config = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'ngrok-skip-browser-warning': 'true', // –û–±—Ö–æ–¥ ngrok –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                'Cache-Control': 'no-cache', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
                ...options.headers
            },
            ...options
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (this.token) {
            config.headers['Authorization'] = `Bearer ${this.token}`;
        }

        try {
            console.log('API request:', { url, method: config.method, headers: config.headers });
            
            const response = await fetch(url, config);
            
            console.log('API response status:', response.status);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if (!response.ok) {
                let errorData;
                try {
                    errorData = await response.json();
                } catch {
                    errorData = { message: `HTTP ${response.status} ${response.statusText}` };
                }
                throw new Error(errorData.message || `HTTP ${response.status}`);
            }

            const data = await response.json();
            console.log('API response data:', data);
            return data;
            
        } catch (error) {
            console.error('API request failed:', {
                url,
                method: config.method,
                error: error.message,
                stack: error.stack
            });
            throw error;
        }
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp
     */
    async authenticate() {
        const webApp = window.Telegram?.WebApp;
        
        if (!webApp || !webApp.initData) {
            throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        try {
            const response = await this.request('/auth/telegram', {
                method: 'POST',
                body: JSON.stringify({
                    initData: webApp.initData,
                    hash: webApp.initDataUnsafe?.hash || ''
                })
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
            this.token = response.access_token;
            localStorage.setItem('auth_token', this.token);
            localStorage.setItem('user_data', JSON.stringify(response.user));

            return response;
        } catch (error) {
            console.error('Authentication failed:', error);
            throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    async getCurrentUser() {
        return await this.request('/auth/me');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤
     */
    async getTickets(params = {}) {
        const searchParams = new URLSearchParams();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        Object.entries(params).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                searchParams.append(key, value);
            }
        });

        const query = searchParams.toString();
        const endpoint = `/tickets${query ? `?${query}` : ''}`;
        
        console.log('API getTickets - –≤—ã–∑–æ–≤:', {
            baseURL: this.baseURL,
            endpoint: endpoint,
            fullURL: `${this.baseURL}${endpoint}`,
            params: params
        });

        return await this.request(endpoint);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ ID
     */
    async getTicket(ticketId) {
        return await this.request(`/tickets/${ticketId}`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
     */
    async createTicket(ticketData) {
        return await this.request('/tickets', {
            method: 'POST',
            body: JSON.stringify(ticketData)
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
     */
    async updateTicket(ticketId, ticketData) {
        return await this.request(`/tickets/${ticketId}`, {
            method: 'PUT',
            body: JSON.stringify(ticketData)
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞
     */
    async getTicketMessages(ticketId, params = {}) {
        const searchParams = new URLSearchParams();
        
        Object.entries(params).forEach(([key, value]) => {
            if (value !== undefined && value !== null) {
                searchParams.append(key, value);
            }
        });

        const query = searchParams.toString();
        const endpoint = `/tickets/${ticketId}/messages${query ? `?${query}` : ''}`;

        return await this.request(endpoint);
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∏–∫–µ—Ç
     */
    async addMessage(ticketId, messageData) {
        return await this.request(`/tickets/${ticketId}/messages`, {
            method: 'POST',
            body: JSON.stringify(messageData)
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
     */
    async getCategories() {
        return await this.request('/categories');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    isAuthenticated() {
        return !!this.token;
    }

    /**
     * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
     */
    logout() {
        this.token = null;
        localStorage.removeItem('auth_token');
        localStorage.removeItem('user_data');
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    showNotification(message, type = 'info') {
        const webApp = window.Telegram?.WebApp;
        
        if (webApp?.showAlert) {
            webApp.showAlert(message);
        } else {
            // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
            console.log(`[${type.toUpperCase()}] ${message}`);
            alert(message);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ popup —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
     */
    showConfirm(message) {
        return new Promise((resolve) => {
            const webApp = window.Telegram?.WebApp;
            
            if (webApp?.showConfirm) {
                webApp.showConfirm(message, resolve);
            } else {
                // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
                resolve(confirm(message));
            }
        });
    }

    /**
     * –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å (haptic feedback)
     */
    hapticFeedback(type = 'light') {
        const webApp = window.Telegram?.WebApp;
        
        if (webApp?.HapticFeedback) {
            try {
                switch (type) {
                    case 'light':
                        webApp.HapticFeedback.impactOccurred('light');
                        break;
                    case 'medium':
                        webApp.HapticFeedback.impactOccurred('medium');
                        break;
                    case 'heavy':
                        webApp.HapticFeedback.impactOccurred('heavy');
                        break;
                    case 'success':
                        webApp.HapticFeedback.notificationOccurred('success');
                        break;
                    case 'error':
                        webApp.HapticFeedback.notificationOccurred('error');
                        break;
                    case 'warning':
                        webApp.HapticFeedback.notificationOccurred('warning');
                        break;
                }
            } catch (e) {
                console.warn('Haptic feedback –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', e);
            }
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.api = new API();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = API;
}