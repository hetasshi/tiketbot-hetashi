"""
–ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import enum
from typing import Optional
import uuid

from sqlalchemy import String, Text, Boolean, Enum, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .base import BaseModel


class NotificationType(enum.Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    NEW_TICKET = "NEW_TICKET"               # –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω
    TICKET_ASSIGNED = "TICKET_ASSIGNED"     # –¢–∏–∫–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω
    TICKET_STATUS_CHANGED = "TICKET_STATUS_CHANGED"  # –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω
    NEW_MESSAGE = "NEW_MESSAGE"             # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ
    TICKET_CLOSED = "TICKET_CLOSED"         # –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç
    SYSTEM = "SYSTEM"                       # –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    
    def __str__(self):
        return self.value
    
    @property
    def display_name(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
        names = {
            NotificationType.NEW_TICKET: "–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç",
            NotificationType.TICKET_ASSIGNED: "–¢–∏–∫–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω",
            NotificationType.TICKET_STATUS_CHANGED: "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω",
            NotificationType.NEW_MESSAGE: "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            NotificationType.TICKET_CLOSED: "–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç",
            NotificationType.SYSTEM: "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        }
        return names[self]
    
    @property
    def icon(self) -> str:
        """–ò–∫–æ–Ω–∫–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        icons = {
            NotificationType.NEW_TICKET: "üé´",
            NotificationType.TICKET_ASSIGNED: "üë§",
            NotificationType.TICKET_STATUS_CHANGED: "üîÑ",
            NotificationType.NEW_MESSAGE: "üí¨",
            NotificationType.TICKET_CLOSED: "‚úÖ",
            NotificationType.SYSTEM: "‚ö°"
        }
        return icons[self]
    
    @property
    def priority(self) -> int:
        """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–±–æ–ª—å—à–µ = –≤–∞–∂–Ω–µ–µ)."""
        priorities = {
            NotificationType.SYSTEM: 5,
            NotificationType.NEW_TICKET: 4,
            NotificationType.TICKET_ASSIGNED: 4,
            NotificationType.NEW_MESSAGE: 3,
            NotificationType.TICKET_STATUS_CHANGED: 2,
            NotificationType.TICKET_CLOSED: 1
        }
        return priorities[self]


class Notification(BaseModel):
    """–ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    
    __tablename__ = "notifications"
    
    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    user_id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
        comment="ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    
    # –°–≤—è–∑–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    ticket_id: Mapped[Optional[uuid.UUID]] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("tickets.id", ondelete="CASCADE"),
        nullable=True,
        index=True,
        comment="ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞"
    )
    
    # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    type: Mapped[NotificationType] = mapped_column(
        Enum(NotificationType),
        nullable=False,
        index=True,
        comment="–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    title: Mapped[str] = mapped_column(
        String(255),
        nullable=False,
        comment="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    
    content: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        comment="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è
    is_read: Mapped[bool] = mapped_column(
        Boolean,
        nullable=False,
        default=False,
        index=True,
        comment="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    )
    
    # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
    user = relationship("User", back_populates="notifications")
    ticket = relationship("Ticket", back_populates="notifications")
    
    @property
    def display_title(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π."""
        return f"{self.type.icon} {self.title}"
    
    @property
    def short_content(self) -> str:
        """–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)."""
        if len(self.content) <= 100:
            return self.content
        return self.content[:97] + "..."
    
    def mark_as_read(self) -> None:
        """–ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ."""
        self.is_read = True
    
    def can_be_viewed_by(self, user: "User") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å
        """
        # –¢–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return self.user_id == user.id
    
    def can_be_deleted_by(self, user: "User") -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å
        """
        # –ü–æ–ª—É—á–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if self.user_id == user.id:
            return True
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å –ª—é–±—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        from .user import UserRole
        return user.role.can_access(UserRole.ADMIN)
    
    @classmethod
    def create_new_ticket_notification(
        cls, 
        user_id: uuid.UUID, 
        ticket_id: uuid.UUID, 
        ticket_title: str
    ) -> dict:
        """
        –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ.
        
        Args:
            user_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–ø–µ—Ä—Å–æ–Ω–∞–ª)
            ticket_id: ID —Ç–∏–∫–µ—Ç–∞
            ticket_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        return {
            "user_id": user_id,
            "ticket_id": ticket_id,
            "type": NotificationType.NEW_TICKET,
            "title": "–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
            "content": f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç: {ticket_title}"
        }
    
    @classmethod
    def create_ticket_assigned_notification(
        cls, 
        user_id: uuid.UUID, 
        ticket_id: uuid.UUID, 
        ticket_title: str,
        assigner_name: str
    ) -> dict:
        """
        –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞.
        
        Args:
            user_id: ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            ticket_id: ID —Ç–∏–∫–µ—Ç–∞
            ticket_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞
            assigner_name: –ò–º—è –Ω–∞–∑–Ω–∞—á–∏–≤—à–µ–≥–æ
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        return {
            "user_id": user_id,
            "ticket_id": ticket_id,
            "type": NotificationType.TICKET_ASSIGNED,
            "title": "–¢–∏–∫–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å",
            "content": f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–∏–∫–µ—Ç '{ticket_title}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {assigner_name}"
        }
    
    @classmethod
    def create_new_message_notification(
        cls, 
        user_id: uuid.UUID, 
        ticket_id: uuid.UUID, 
        ticket_title: str,
        sender_name: str,
        message_preview: str
    ) -> dict:
        """
        –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
        
        Args:
            user_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            ticket_id: ID —Ç–∏–∫–µ—Ç–∞
            ticket_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞
            sender_name: –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            message_preview: –ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        return {
            "user_id": user_id,
            "ticket_id": ticket_id,
            "type": NotificationType.NEW_MESSAGE,
            "title": "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ",
            "content": f"{sender_name} –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–∏–∫–µ—Ç–µ '{ticket_title}': {message_preview}"
        }
    
    @classmethod
    def create_status_changed_notification(
        cls, 
        user_id: uuid.UUID, 
        ticket_id: uuid.UUID, 
        ticket_title: str,
        old_status: str,
        new_status: str
    ) -> dict:
        """
        –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            ticket_id: ID —Ç–∏–∫–µ—Ç–∞
            ticket_title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–∫–µ—Ç–∞
            old_status: –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å
            new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        return {
            "user_id": user_id,
            "ticket_id": ticket_id,
            "type": NotificationType.TICKET_STATUS_CHANGED,
            "title": "–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω",
            "content": f"–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ '{ticket_title}' –∏–∑–º–µ–Ω–µ–Ω —Å '{old_status}' –Ω–∞ '{new_status}'"
        }
    
    def __str__(self) -> str:
        return f"Notification {self.type.display_name} for user {self.user_id}"