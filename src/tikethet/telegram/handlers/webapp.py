"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram Web App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
"""

import json
import logging
from typing import Optional, Dict, Any

from aiogram import Dispatcher, Router
from aiogram.types import Message, CallbackQuery, WebAppData, WebAppInfo
from aiogram.filters import Filter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from tikethet.config import get_settings

logger = logging.getLogger(__name__)
router = Router()


class WebAppDataFilter(Filter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App.
    """
    
    async def __call__(self, message: Message) -> bool:
        return message.web_app_data is not None


@router.message(WebAppDataFilter())
async def process_web_app_data(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Web App.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Web App
    """
    if not message.web_app_data:
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App
        data = json.loads(message.web_app_data.data)
        logger.info(f"Received Web App data: {data}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        action = data.get("action")
        
        if action == "ticket_created":
            await handle_ticket_created(message, data)
        elif action == "ticket_updated":
            await handle_ticket_updated(message, data)
        elif action == "support_request":
            await handle_support_request(message, data)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ Web App: {action}")
            await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ.")
            
    except json.JSONDecodeError:
        logger.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App")
        await message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")


async def handle_ticket_created(message: Message, data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data: –î–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    ticket_id = data.get("ticket_id")
    title = data.get("title", "–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç")
    category = data.get("category", "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
    
    success_text = f"""
–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!

üìã ID: #{ticket_id}
üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}

–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞.
"""
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
                    callback_data=f"open_ticket_{ticket_id}"
                )
            ]
        ]
    )
    
    await message.answer(
        text=success_text,
        reply_markup=keyboard
    )


async def handle_ticket_updated(message: Message, data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data: –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    ticket_id = data.get("ticket_id")
    status = data.get("status", "–æ–±–Ω–æ–≤–ª–µ–Ω")
    
    update_text = f"""
–¢–∏–∫–µ—Ç #{ticket_id} {status}

–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.
"""
    
    await message.answer(text=update_text)


async def handle_support_request(message: Message, data: Dict[str, Any]) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data: –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    """
    problem_type = data.get("problem_type", "–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å")
    description = data.get("description", "")
    
    # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    
    success_text = f"""
–ó–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!

üéØ –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {problem_type}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description[:100]}...

–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
"""
    
    await message.answer(text=success_text)


@router.callback_query(lambda c: c.data and c.data.startswith("create_ticket"))
async def callback_create_ticket(callback_query: CallbackQuery) -> None:
    """
    Callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.
    """
    settings = get_settings()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è",
                    web_app=WebAppInfo(url=f"{settings.frontend_url}/create-ticket")
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("quick_support"))
async def callback_quick_support(callback_query: CallbackQuery) -> None:
    """
    Callback –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    await callback_query.message.edit_text(
        text="""
–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

–í–∫–ª—é—á–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º –¥–µ—Ç–∞–ª–µ–π:
‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?
‚Ä¢ –ö–æ–≥–¥–∞ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?
‚Ä¢ –ß—Ç–æ –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å?
‚Ä¢ –ö–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤–∏–¥–µ–ª–∏?

–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
"""
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("open_ticket_"))
async def callback_open_ticket(callback_query: CallbackQuery) -> None:
    """
    Callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞.
    """
    ticket_id = callback_query.data.replace("open_ticket_", "")
    settings = get_settings()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
                    web_app=WebAppInfo(url=f"{settings.frontend_url}/tickets/{ticket_id}")
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        text=f"–û—Ç–∫—Ä–æ–π—Ç–µ —Ç–∏–∫–µ—Ç #{ticket_id} –≤ Mini App:",
        reply_markup=keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data and c.data.startswith("view_tickets_detailed"))
async def callback_view_tickets_detailed(callback_query: CallbackQuery) -> None:
    """
    Callback –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤.
    """
    settings = get_settings()
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Ç–∏–∫–µ—Ç—ã",
                    web_app=WebAppInfo(url=f"{settings.frontend_url}/tickets")
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        text="–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )
    await callback_query.answer()


def register_handlers(dp: Dispatcher) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö handlers Web App.
    
    Args:
        dp: Dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ handlers
    """
    dp.include_router(router)
    logger.info("Web App handlers registered")